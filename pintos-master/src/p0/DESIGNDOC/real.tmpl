			+-------------------------+
			|        CS 318           |
			| PROJECT 0: Getting Real |
			|     DESIGN DOCUMENT     |
			+-------------------------+
				   
---- AUTHOR ----

>> Fill in your name and email address.

FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     Booting Pintos
			     ==============

---- QUESTIONS ---- 
>> Put the screenshots of Pintos running in src/p0.
>> A1: Is there any particular issue that you would like us to know?

			     Debugging
			     =========

---- QUESTIONS: BIOS ---- 
>> B1: What is the first instruction that gets executed?
		ljmp   $0xf000,$000e05b

>> B2: At which physical address is this instruction located?
		0xffff0

>> B3: Can you guess why the first instruction is like this?
		When the CPU boots up, it is in real mode and starts executing at address 0xFFFF0. 
		But the ROM code at 0xFFFF0 is usually very small, so it performs an ljmp to jump to the full BIOS code area.

>> B4: What are the next three instructions?
	[f000:e05b]    0xfe05b:	cmpw   $0xffc8,%cs:(%esi)
	[f000:e062]    0xfe062:	jne    0xd241d416
	[f000:e066]    0xfe066:	xor    %edx,%edx

---- QUESTIONS: BOOTLOADER ---- 
>> B5: How does the bootloader read disk sectors? In particular, what BIOS interrupt
is used?
	Pintos Bootloader reads disk data through INT 0x13, which is the disk I/O interrupt provided by BIOS and can read data from disk.

>> B6: How does the bootloader decides whether it successfully finds the Pintos kernel?
	CF == 0. First use the info registers command to check the eflags in the output. 
	My eflags is 0x246 [ PF ZF IF ], which is converted to binary: 0b 0010 0100 0110. 
	At this time, CF is 0 and is not set, so it is judged that the disk read is successful.

>> B7: What happens when the bootloader could not find the Pintos kernel?
	Print error message.
	CPU executes ‘hlt’ instruction and the system hangs.

>> B8: At what point and how exactly does the bootloader transfer control to the Pintos kernel?
	When the bootloader successfully reads the Pintos kernel into memory and verifies its validity, it jumps to the kernel entry.
	The bootloader loads the Pintos kernel to 0x20000.
	Jumps to 0x20000 and executes the kernel code.

---- QUESTIONS: KERNEL ---- 
>> B9: At the entry of pintos_init(), what is the value of expression 
init_page_dir[pd_no(ptov(0))] in hexadecimal format?
=> 0xc000efef:	int3   
=> 0xc000efef:	int3   
$1 = 0x0

>> B10: When palloc_get_page() is called for the first time,

>> B10.1 what does the call stack look like?
#0  palloc_get_page (flags=(PAL_ASSERT | PAL_ZERO))
    at ../../threads/palloc.c:113
#1  0xc00203aa in paging_init () at ../../threads/init.c:168
#2  0xc002031b in pintos_init () at ../../threads/init.c:100
#3  0xc002013d in start () at ../../threads/start.S:180

>> B10.2 what is the return value in hexadecimal format?
$5 = 0xc0101000


>> B10.3 what is the value of expression init_page_dir[pd_no(ptov(0))] in hexadecimal format?
=> 0xc000ef8f:	int3   
=> 0xc000ef8f:	int3   
$6 = 0x0


>> B11: When palloc_get_page() is called for the third time,

>> B11.1 what does the call stack look like?
#0  palloc_get_page (flags=PAL_ZERO) at ../../threads/palloc.c:113
#1  0xc0020a81 in thread_create (name=0xc002e895 "idle", priority=0, 
    function=0xc0020eb0 <idle>, aux=0xc000efbc) at ../../threads/thread.c:178
#2  0xc0020976 in thread_start () at ../../threads/thread.c:111
#3  0xc0020334 in pintos_init () at ../../threads/init.c:119
#4  0xc002013d in start () at ../../threads/start.S:180


>> B11.2 what is the return value in hexadecimal format?
$8 = 0xc0103000


>> B11.3 what is the value of expression init_page_dir[pd_no(ptov(0))] in hexadecimal format?
=> 0xc000ef4f:	int3   
=> 0xc000ef4f:	int3   
$9 = 0x102027


			     Kernel Monitor
			     ==============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----
>> C2: Explain how you read and write to the console for the kernel monitor.

>> C3: Any additional enhancement you implement?
